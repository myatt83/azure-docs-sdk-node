### YamlMime:TSType
name: MetricsAdvisorAdministrationClient
uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient'
package: '@azure/ai-metrics-advisor'
summary: >-
  Client class for interacting with Azure Metrics Advisor Service to perform
  management operations
fullName: MetricsAdvisorAdministrationClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      MetricsAdvisorAdministrationClient(string, TokenCredential |
      MetricsAdvisorKeyCredential, MetricsAdvisorAdministrationClientOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.constructor'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Creates an instance of MetricsAdvisorAdministrationClient.


      Example usage:

      ```ts

      import { MetricsAdvisorAdministrationClient, MetricsAdvisorKeyCredential }
      from "@azure/ai-metrics-advisor";


      const client = new MetricsAdvisorAdministrationClient(
         "<service endpoint>",
         new MetricsAdvisorKeyCredential("<subscription key>", "<api key>")
      );

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new MetricsAdvisorAdministrationClient(endpointUrl: string, credential:
        TokenCredential | MetricsAdvisorKeyCredential, options?:
        MetricsAdvisorAdministrationClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: Url to an Azure Metrics Advisor service endpoint
        - id: credential
          type: >-
            TokenCredential | <xref
            uid="@azure/ai-metrics-advisor.MetricsAdvisorKeyCredential" />
          description: Used to authenticate requests to the service.
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClientOptions"
            />
          description: Used to configure the Metrics Advisor client.
properties:
  - name: endpointUrl
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.endpointUrl'
    package: '@azure/ai-metrics-advisor'
    summary: Url to service endpoint
    fullName: endpointUrl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'endpointUrl: string'
      return:
        description: ''
        type: string
methods:
  - name: createAlertConfig(Omit<AnomalyAlertConfiguration, "id">, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createAlertConfig
    package: '@azure/ai-metrics-advisor'
    summary: Creates anomaly alerting configuration for a given metric
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAlertConfig(config: Omit<AnomalyAlertConfiguration,
        "id">, options?: OperationOptions): Promise<AnomalyAlertConfiguration>
      parameters:
        - id: config
          type: >-
            Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />,
            "id"&gt;
          description: The alert configuration object to create
        - id: options
          type: OperationOptions
          description: ''
      return:
        description: Response with Alert object
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />&gt;
  - name: createDataFeed(DataFeedDescriptor, CreateDataFeedOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createDataFeed
    package: '@azure/ai-metrics-advisor'
    summary: Adds a new data feed for a specific data source and provided settings
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDataFeed(feed: DataFeedDescriptor, operationOptions?:
        CreateDataFeedOptions): Promise<MetricsAdvisorDataFeed>
      parameters:
        - id: feed
          type: <xref uid="@azure/ai-metrics-advisor.DataFeedDescriptor" />
          description: the data feed object to create
        - id: operationOptions
          type: <xref uid="@azure/ai-metrics-advisor.CreateDataFeedOptions" />
          description: ''
      return:
        description: Response with Datafeed object
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.MetricsAdvisorDataFeed" />&gt;
  - name: >-
      createDataSourceCredential(DataSourceCredentialEntityUnion,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createDataSourceCredential
    package: '@azure/ai-metrics-advisor'
    summary: Creates data source credential for the given id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDataSourceCredential(dataSourceCredential:
        DataSourceCredentialEntityUnion, options?: OperationOptions):
        Promise<DataSourceCredentialEntityUnion>
      parameters:
        - id: dataSourceCredential
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.DataSourceCredentialEntityUnion" />
          description: the credential entity object to create
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.DataSourceCredentialEntityUnion" />&gt;
  - name: >-
      createDetectionConfig(Omit<AnomalyDetectionConfiguration, "id">,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createDetectionConfig
    package: '@azure/ai-metrics-advisor'
    summary: Creates an anomaly detection configuration for a given metric
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createDetectionConfig(config:
        Omit<AnomalyDetectionConfiguration, "id">, options?: OperationOptions):
        Promise<AnomalyDetectionConfiguration>
      parameters:
        - id: config
          type: >-
            Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />,
            "id"&gt;
          description: The detection configuration object to create
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: Response with Detection Config object
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />&gt;
  - name: createHook(EmailNotificationHook | WebNotificationHook, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.createHook'
    package: '@azure/ai-metrics-advisor'
    summary: Adds a new hook
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createHook(hookInfo: EmailNotificationHook |
        WebNotificationHook, options?: OperationOptions):
        Promise<NotificationHookUnion>
      parameters:
        - id: hookInfo
          type: >-
            <xref uid="@azure/ai-metrics-advisor.EmailNotificationHook" /> |
            <xref uid="@azure/ai-metrics-advisor.WebNotificationHook" />
          description: >-
            Information for the new hook consists of the hook type, name,
            description, external link and hook parameter
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: Response with Hook object
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.NotificationHookUnion"
          />&gt;
  - name: deleteAlertConfig(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteAlertConfig
    package: '@azure/ai-metrics-advisor'
    summary: Deletes metric anomaly alert configuration for the given configuration id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteAlertConfig(id: string, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: id
          type: string
          description: id of the anomaly alert configuration to delete
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ai-metrics-advisor.RestResponse" />&gt;
  - name: deleteDataFeed(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteDataFeed
    package: '@azure/ai-metrics-advisor'
    summary: Deletes a data feed for the given data feed id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDataFeed(id: string, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: id
          type: string
          description: id of the data feed to delete
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ai-metrics-advisor.RestResponse" />&gt;
  - name: deleteDataSourceCredential(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteDataSourceCredential
    package: '@azure/ai-metrics-advisor'
    summary: Deletes data source credential for the given id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDataSourceCredential(id: string, options?:
        OperationOptions): Promise<RestResponse>
      parameters:
        - id: id
          type: string
          description: id of the credential entity to delete
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ai-metrics-advisor.RestResponse" />&gt;
  - name: deleteDetectionConfig(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteDetectionConfig
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Deletes a metric anomaly detection configuration for the given
      configuration id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDetectionConfig(id: string, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: id
          type: string
          description: id of the detection configuration to delete
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ai-metrics-advisor.RestResponse" />&gt;
  - name: deleteHook(string, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.deleteHook'
    package: '@azure/ai-metrics-advisor'
    summary: Deletes hook for the given hook id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteHook(id: string, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: id
          type: string
          description: id of the hook to delete
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ai-metrics-advisor.RestResponse" />&gt;
  - name: getAlertConfig(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getAlertConfig
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Retrieves metric anomaly alert configuration for the given configuration
      id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAlertConfig(id: string, options?: OperationOptions):
        Promise<AnomalyAlertConfiguration>
      parameters:
        - id: id
          type: string
          description: id of the anomaly alert configuration to retrieve
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />&gt;
  - name: getDataFeed(string, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getDataFeed'
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves data feed for the given data feed id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDataFeed(id: string, options?: OperationOptions):
        Promise<MetricsAdvisorDataFeed>
      parameters:
        - id: id
          type: string
          description: id for the data feed to retrieve
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.MetricsAdvisorDataFeed" />&gt;
  - name: getDataFeedIngestionProgress(string, {})
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getDataFeedIngestionProgress
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves data feed ingestion progress for the given data feed id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDataFeedIngestionProgress(dataFeedId: string, options?: {}):
        Promise<GetIngestionProgressResponse>
      parameters:
        - id: dataFeedId
          type: string
          description: data feed id for the ingestion progress to retrieve
        - id: options
          type: '{}'
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetIngestionProgressResponse" />&gt;
  - name: getDataSourceCredential(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getDataSourceCredential
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves data source credential for the given id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDataSourceCredential(id: string, options?:
        OperationOptions): Promise<DataSourceCredentialEntityUnion>
      parameters:
        - id: id
          type: string
          description: id of the credential entity to retrieve
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.DataSourceCredentialEntityUnion" />&gt;
  - name: getDetectionConfig(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getDetectionConfig
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Retrieves metric anomaly detection configuration for the given
      configuration id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDetectionConfig(id: string, options?: OperationOptions):
        Promise<AnomalyDetectionConfiguration>
      parameters:
        - id: id
          type: string
          description: id of the detection configuration to retrieve
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />&gt;
  - name: getHook(string, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.getHook'
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves hook for the given hook id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getHook(id: string, options?: OperationOptions):
        Promise<NotificationHookUnion>
      parameters:
        - id: id
          type: string
          description: id for the hook to retrieve
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.NotificationHookUnion"
          />&gt;
  - name: listAlertConfigs(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listAlertConfigs
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list anamoly alert configurations
      associated with the given detection configuration.


      `.byPage()` returns an async iterable iterator to list the alert
      configurations in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const alertConfigurations =
      client.listAlertConfigs(detectionConfigurationId);

      let i = 1;

      for await (const alertConfiguration of alertConfigurations){
       console.log(`alertConfiguration ${i++}:`);
       console.log(alertConfiguration);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listAlertConfigs(detectionConfigurationId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` alert - ${result.value.id}, ${result.value.name}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listAlertConfigs(detectionConfigurationId)
        .byPage();
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value.alertConfigurations) {
         console.log(`-- page ${i++}`);
         for (const alert of page.value) {
           console.log(`${alert}`);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listAlertConfigs(detectionConfigId: string, options?:
        OperationOptions): PagedAsyncIterableIterator<AnomalyAlertConfiguration,
        AlertConfigurationsPageResponse, undefined>
      parameters:
        - id: detectionConfigId
          type: string
          description: anomaly detection configuration unique id
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />, <xref
          uid="@azure/ai-metrics-advisor.AlertConfigurationsPageResponse" />,
          undefined&gt;
  - name: >-
      listDataFeedIngestionStatus(string, string | Date, string | Date,
      ListDataFeedIngestionStatusOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listDataFeedIngestionStatus
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list data feed ingestion status
      based on options


      `.byPage()` returns an async iterable iterator to list the data feed
      ingestion status in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const ingestionStatusList =
      client.listDataFeedIngestionStatus(dataFeedId);

      let i = 1;

      for await (const ingestionStatus of ingestionStatusList){
       console.log(`ingestionStatus ${i++}:`);
       console.log(ingestionStatus);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listDataFeedIngestionStatus(dataFeedId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` anomaly - ${result.value.timestamp}, ${result.value.status}, ${result.value.mesage}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listDataFeedIngestionStatus(dataFeedId).byPage({
      maxPageSize: 2 });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const status of page.value) {
           console.log("ingestion status-");
           console.dir(status);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listDataFeedIngestionStatus(dataFeedId: string, startTime:
        string | Date, endTime: string | Date, options?:
        ListDataFeedIngestionStatusOptions):
        PagedAsyncIterableIterator<IngestionStatus, IngestionStatusPageResponse,
        PageSettings>
      parameters:
        - id: dataFeedId
          type: string
          description: data feed id for list of data feed ingestion status
        - id: startTime
          type: string | Date
          description: The start point of time range to query data ingestion status
        - id: endTime
          type: string | Date
          description: The end point of time range to query data ingestion status
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListDataFeedIngestionStatusOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.IngestionStatus" />, <xref
          uid="@azure/ai-metrics-advisor.IngestionStatusPageResponse" />,
          PageSettings&gt;
  - name: listDataFeeds(ListDataFeedsOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listDataFeeds'
    package: '@azure/ai-metrics-advisor'
    summary: |-
      Returns an async iterable iterator to list data feeds based on options

      `.byPage()` returns an async iterable iterator to list the blobs in pages.

      Example using `for await` syntax:

      ```js
      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const dataFeedList = client.listDataFeeds({
      filter: { // filter
       dataFeedName: "js-blob-datafeed"
       }
      });
      let i = 1;
      for await (const datafeed of dataFeedList){
       console.log(`datafeed ${i++}:`);
       console.log(datafeed);
      }
      ```

      Example using `iter.next()`:

      ```js
      let iter = client.listDataFeeds();
      let dataFeedItem = await iter.next();
      while (!dataFeedItem.done) {
        console.log(`id :${dataFeedItem.value.id}, name: ${dataFeedItem.value.name}`);
        dataFeedItem = await iter.next();
      }
      ```

      Example using `byPage()`:

      ```js
      const pages = client.listDataFeeds().byPage({ maxPageSize: 10 });
      let page = await pages.next();
      let i = 1;
      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const feed of page.value) {
           console.log(`  ${feed.id} - ${feed.name}`);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listDataFeeds(options?: ListDataFeedsOptions):
        PagedAsyncIterableIterator<MetricsAdvisorDataFeed,
        DataFeedsPageResponse, PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.ListDataFeedsOptions" />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.MetricsAdvisorDataFeed" />, <xref
          uid="@azure/ai-metrics-advisor.DataFeedsPageResponse" />,
          PageSettings&gt;
  - name: listDataSourceCredential(ListDataSourceCredentialsOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listDataSourceCredential
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list data source credentials based
      on options


      `.byPage()` returns an async iterable iterator to list the credentials in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const dataSourceCredentialList = client.listDataSourceCredential();

      let i = 1;

      for await (const dataSourceCredential of dataSourceCredentialList){
       console.log(`dataSourceCredential ${i++}:`);
       console.log(dataSourceCredential);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listDataSourceCredential();

      let result = await iter.next();

      while (!result.done) {
        console.dir(result);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listDataSourceCredential().byPage({ maxPageSize: 2
      });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const credential of page.value) {
           console.log("dataSource credential-");
           console.dir(credential);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listDataSourceCredential(options?:
        ListDataSourceCredentialsOptions):
        PagedAsyncIterableIterator<DataSourceCredentialEntityUnion,
        CredentialsPageResponse, PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListDataSourceCredentialsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.DataSourceCredentialEntityUnion" />,
          <xref uid="@azure/ai-metrics-advisor.CredentialsPageResponse" />,
          PageSettings&gt;
  - name: listDetectionConfigs(string, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listDetectionConfigs
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list anomaly detection
      configurations based on options


      `.byPage()` returns an async iterable iterator to list the anomaly
      detection configurations in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const anomalyDetectionList = client.listDetectionConfigs(metricId);

      let i = 1;

      for await (const anomaly of anomalyDetectionList){
       console.log(`anomaly ${i++}:`);
       console.log(anomaly);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listDetectionConfigs(metricId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` anomaly - ${result.value.id}, ${result.value.name}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listDetectionConfigs(metricId)
        .byPage();
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const detectionConfiguration of page.value) {
           console.log("detection configuration-");
           console.dir(detectionConfiguration);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listDetectionConfigs(metricId: string, options?:
        OperationOptions):
        PagedAsyncIterableIterator<AnomalyDetectionConfiguration,
        DetectionConfigurationsPageResponse, undefined>
      parameters:
        - id: metricId
          type: string
          description: metric id for list of anomaly detection configurations
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />,
          <xref
          uid="@azure/ai-metrics-advisor.DetectionConfigurationsPageResponse"
          />, undefined&gt;
  - name: listHooks(ListHooksOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.listHooks'
    package: '@azure/ai-metrics-advisor'
    summary: |-
      Returns an async iterable iterator to list hooks based on options

      `.byPage()` returns an async iterable iterator to list the hooks in pages.

      Example using `for await` syntax:

      ```js
      const client = new MetricsAdvisorAdministrationClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const hookList = client.listHooks();
      let i = 1;
      for await (const hook of hookList){
       console.log(`hook ${i++}:`);
       console.log(hook);
      }
      ```

      Example using `iter.next()`:

      ```js
      let iter = client.listHooks();
      let result = await iter.next();
      while (!result.done) {
        console.log(` hook - ${result.value.id}`);
        result = await iter.next();
      }
      ```

      Example using `byPage()`:

      ```js
      const pages = client.listHooks().byPage({ maxPageSize: 2 });
      let page = await pages.next();
      let i = 1;
      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const hook of page.value) {
           console.log("hook-");
           console.dir(hook);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listHooks(options?: ListHooksOptions):
        PagedAsyncIterableIterator<NotificationHookUnion, HooksPageResponse,
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.ListHooksOptions" />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.NotificationHookUnion" />, <xref
          uid="@azure/ai-metrics-advisor.HooksPageResponse" />, PageSettings&gt;
  - name: >-
      refreshDataFeedIngestion(string, string | Date, string | Date,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.refreshDataFeedIngestion
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Refreshes or resets data feed ingestion progress for the given data feed
      id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function refreshDataFeedIngestion(dataFeedId: string, startTime: string
        | Date, endTime: string | Date, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: dataFeedId
          type: string
          description: The data feed id for the ingestion progress to refresh or reset
        - id: startTime
          type: string | Date
          description: The start point of time range to query data ingestion status
        - id: endTime
          type: string | Date
          description: The end point of time range to query data ingestion status
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ai-metrics-advisor.RestResponse" />&gt;
  - name: >-
      updateAlertConfig(string, Partial<Omit<AnomalyAlertConfiguration, "id">>,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateAlertConfig
    package: '@azure/ai-metrics-advisor'
    summary: Updates an anomaly alert configuration for the given configuration id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateAlertConfig(id: string, patch:
        Partial<Omit<AnomalyAlertConfiguration, "id">>, options?:
        OperationOptions): Promise<AnomalyAlertConfiguration>
      parameters:
        - id: id
          type: string
          description: id of the anomaly alert configuration to update
        - id: patch
          type: >-
            Partial&lt;Omit&lt;<xref
            uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />,
            "id"&gt;&gt;
          description: Input to the update anomaly alert configuration operation
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyAlertConfiguration" />&gt;
  - name: updateDataFeed(string, DataFeedPatch, OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateDataFeed
    package: '@azure/ai-metrics-advisor'
    summary: Updates a data feed given its id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateDataFeed(dataFeedId: string, patch: DataFeedPatch,
        options?: OperationOptions): Promise<MetricsAdvisorDataFeed>
      parameters:
        - id: dataFeedId
          type: string
          description: id of the data feed to update
        - id: patch
          type: <xref uid="@azure/ai-metrics-advisor.DataFeedPatch" />
          description: >-
            Input to the update data feed operation
            [DataFeedPatch](xref:@azure/ai-metrics-advisor.DataFeedPatch)
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.MetricsAdvisorDataFeed" />&gt;
  - name: >-
      updateDataSourceCredential(string, DataSourceCredentialPatch,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateDataSourceCredential
    package: '@azure/ai-metrics-advisor'
    summary: Updates data source credential for the given id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateDataSourceCredential(id: string, patch:
        DataSourceCredentialPatch, options?: OperationOptions):
        Promise<DataSourceCredentialEntityUnion>
      parameters:
        - id: id
          type: string
          description: id of the credential entity to update
        - id: patch
          type: <xref uid="@azure/ai-metrics-advisor.DataSourceCredentialPatch" />
          description: >-
            Input to the update credential entity operation
            [DataSourceCredentialPatch](xref:@azure/ai-metrics-advisor.DataSourceCredentialPatch)
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.DataSourceCredentialEntityUnion" />&gt;
  - name: >-
      updateDetectionConfig(string, AnomalyDetectionConfigurationPatch,
      OperationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateDetectionConfig
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Updates a metric anomaly detection configuration for the given
      configuration id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateDetectionConfig(id: string, patch:
        AnomalyDetectionConfigurationPatch, options?: OperationOptions):
        Promise<AnomalyDetectionConfiguration>
      parameters:
        - id: id
          type: string
          description: id of the detection configuration for metric anomaly to update
        - id: patch
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.AnomalyDetectionConfigurationPatch"
            />
          description: >-
            Input to the update anomaly detection configuration operation
            [AnomalyDetectionConfigurationPatch](xref:@azure/ai-metrics-advisor.AnomalyDetectionConfigurationPatch)
        - id: options
          type: OperationOptions
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyDetectionConfiguration" />&gt;
  - name: >-
      updateHook(string, EmailNotificationHookPatch | WebNotificationHookPatch,
      OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorAdministrationClient.updateHook'
    package: '@azure/ai-metrics-advisor'
    summary: Updates hook for the given hook id
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateHook(id: string, patch: EmailNotificationHookPatch |
        WebNotificationHookPatch, options?: OperationOptions):
        Promise<NotificationHookUnion>
      parameters:
        - id: id
          type: string
          description: id of the hook to update
        - id: patch
          type: >-
            <xref uid="@azure/ai-metrics-advisor.EmailNotificationHookPatch" />
            | <xref uid="@azure/ai-metrics-advisor.WebNotificationHookPatch" />
          description: >-
            Input to the update hook of type Email
            [EmailNotificationHookPatch](xref:@azure/ai-metrics-advisor.EmailNotificationHookPatch)
            or WebHook <xref:WebhookNotificationHookPatch>
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.NotificationHookUnion"
          />&gt;
