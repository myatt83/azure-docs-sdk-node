### YamlMime:TSType
name: MetricsAdvisorClient
uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient'
package: '@azure/ai-metrics-advisor'
summary: >-
  Client class for interacting with Azure Metrics Advisor Service to query
  alerts/incidents/anomalies, diagnose incidents, provide metric feedback
fullName: MetricsAdvisorClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      MetricsAdvisorClient(string, TokenCredential |
      MetricsAdvisorKeyCredential, MetricsAdvisorClientOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.constructor'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Creates an instance of MetricsAdvisorClient.


      Example usage:

      ```ts

      import { MetricsAdvisorClient, MetricsAdvisorKeyCredential } from
      "@azure/ai-metrics-advisor";


      const client = new MetricsAdvisorClient(
         "<service endpoint>",
         new MetricsAdvisorKeyCredential("<subscription key>", "<api key>")
      );

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new MetricsAdvisorClient(endpointUrl: string, credential:
        TokenCredential | MetricsAdvisorKeyCredential, options?:
        MetricsAdvisorClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: Url to an Azure Metrics Advisor service endpoint
        - id: credential
          type: >-
            TokenCredential | <xref
            uid="@azure/ai-metrics-advisor.MetricsAdvisorKeyCredential" />
          description: Used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.MetricsAdvisorClientOptions" />
          description: Used to configure the Metrics Advisor client.
properties:
  - name: endpointUrl
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.endpointUrl'
    package: '@azure/ai-metrics-advisor'
    summary: Url to service endpoint
    fullName: endpointUrl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'endpointUrl: string'
      return:
        description: ''
        type: string
methods:
  - name: addFeedback(MetricFeedbackUnion, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.addFeedback'
    package: '@azure/ai-metrics-advisor'
    summary: Creates a metric feedback.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addFeedback(feedback: MetricFeedbackUnion, options?:
        OperationOptions): Promise<MetricFeedbackUnion>
      parameters:
        - id: feedback
          type: <xref uid="@azure/ai-metrics-advisor.MetricFeedbackUnion" />
          description: Content of the feedback
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: Response with Feedback object
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.MetricFeedbackUnion"
          />&gt;
  - name: getFeedback(string, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.getFeedback'
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves a metric feedback for the given feedback id.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFeedback(id: string, options?: OperationOptions):
        Promise<MetricFeedbackUnion>
      parameters:
        - id: id
          type: string
          description: Id of the feedback to retrieve
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ai-metrics-advisor.MetricFeedbackUnion"
          />&gt;
  - name: getIncidentRootCauses(string, string, OperationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.getIncidentRootCauses'
    package: '@azure/ai-metrics-advisor'
    summary: Gets the root causes of an incident.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getIncidentRootCauses(detectionConfigId: string, incidentId:
        string, options?: OperationOptions):
        Promise<GetIncidentRootCauseResponse>
      parameters:
        - id: detectionConfigId
          type: string
          description: Anomaly detection configuration id
        - id: incidentId
          type: string
          description: Incident id
        - id: options
          type: OperationOptions
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetIncidentRootCauseResponse" />&gt;
  - name: >-
      getMetricEnrichedSeriesData(string, DimensionKey[], string | Date, string
      | Date, GetMetricEnrichedSeriesDataOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.getMetricEnrichedSeriesData'
    package: '@azure/ai-metrics-advisor'
    summary: Retrieves enriched metric series data for a detection configuration
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMetricEnrichedSeriesData(detectionConfigId: string,
        seriesKey: DimensionKey[], startTime: string | Date, endTime: string |
        Date, options?: GetMetricEnrichedSeriesDataOptions):
        Promise<GetMetricEnrichedSeriesDataResponse>
      parameters:
        - id: detectionConfigId
          type: string
          description: Anomaly detection configuration id
        - id: seriesKey
          type: <xref uid="@azure/ai-metrics-advisor.DimensionKey" />[]
          description: Series to retrieve their data
        - id: startTime
          type: string | Date
          description: The start of time range to query metric enriched series data
        - id: endTime
          type: string | Date
          description: The end of time range to query metric enriched series data
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.GetMetricEnrichedSeriesDataOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetMetricEnrichedSeriesDataResponse"
          />&gt;
  - name: >-
      getMetricSeriesData(string, DimensionKey[], string | Date, string | Date,
      GetMetricSeriesDataOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.getMetricSeriesData'
    package: '@azure/ai-metrics-advisor'
    summary: Gets the time series data for a metric
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getMetricSeriesData(metricId: string, seriesKey:
        DimensionKey[], startTime: string | Date, endTime: string | Date,
        options?: GetMetricSeriesDataOptions):
        Promise<GetMetricSeriesDataResponse>
      parameters:
        - id: metricId
          type: string
          description: Metric id
        - id: seriesKey
          type: <xref uid="@azure/ai-metrics-advisor.DimensionKey" />[]
          description: A list of time series to retrieve their data
        - id: startTime
          type: string | Date
          description: The start of the time range to retrieve series data
        - id: endTime
          type: string | Date
          description: The end of the time range to retrieve series data
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.GetMetricSeriesDataOptions" />
          description: The options parameter
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ai-metrics-advisor.GetMetricSeriesDataResponse" />&gt;
  - name: >-
      listAlerts(string, string | Date, string | Date, AlertQueryTimeMode,
      ListAlertsOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listAlerts'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list alerts for an alert
      configuration.


      `.byPage()` returns an async iterable iterator to list the alerts in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey)
      );

      const alerts = client.listAlerts(alertConfigId,
        startTime, endTime, timeMode
      );

      let i = 1;

      for await (const alert of alerts) {
        console.log(`alert ${i++}:`);
        console.log(alert);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listAlerts(alertConfigId, startTime, endTime, timeMode);

      let result = await iter.next();

      while (!result.done) {
        console.log(` alert - ${result.value.id}`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listAlerts(alertConfigId, startTime, endTime,
      timeMode)
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const alert of page.value) {
           console.log(`${alert}`);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listAlerts(alertConfigId: string, startTime: string | Date,
        endTime: string | Date, timeMode: AlertQueryTimeMode, options?:
        ListAlertsOptions): PagedAsyncIterableIterator<AnomalyAlert,
        AlertsPageResponse, PageSettings>
      parameters:
        - id: alertConfigId
          type: string
          description: Anomaly alerting configuration unique id
        - id: startTime
          type: string | Date
          description: >-
            The start of time range to query alert items for alerting
            configuration
        - id: endTime
          type: string | Date
          description: >-
            The end of time range to query alert items for alerting
            configuration
        - id: timeMode
          type: <xref uid="@azure/ai-metrics-advisor.AlertQueryTimeMode" />
          description: Query time mode - "AnomalyTime" | "CreatedTime" | "ModifiedTime"
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.ListAlertsOptions" />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyAlert" />, <xref
          uid="@azure/ai-metrics-advisor.AlertsPageResponse" />,
          PageSettings&gt;
  - name: >-
      listAnomaliesForAlert(AnomalyAlert,
      ListAnomaliesForAlertConfigurationOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listAnomaliesForAlert'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list anamolies associated with an
      alert


      `.byPage()` returns an async iterable iterator to list the anomalies in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const anamolyList = client.listAnomaliesForAlert({alertConfigId, id:
      alertId});

      let i = 1;

      for await (const anamoly of anamolyList){
       console.log(`anamoly ${i++}:`);
       console.log(anamoly);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listAnomaliesForAlert({alertConfigId, id: alertId});

      let result = await iter.next();

      while (!result.done) {
        console.log(` anamoly - ${result.value.metricId}, ${result.value.detectionConfigurationId} `);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listAnomaliesForAlert({alertConfigId, id:
      alertId}).byPage({ maxPageSize: 10 });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const anomaly of page.value) {
           console.log(`${anomaly}`);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listAnomaliesForAlert(alert: AnomalyAlert, options?:
        ListAnomaliesForAlertConfigurationOptions):
        PagedAsyncIterableIterator<DataPointAnomaly, AnomaliesPageResponse,
        PageSettings>
      parameters:
        - id: alert
          type: <xref uid="@azure/ai-metrics-advisor.AnomalyAlert" />
          description: Anomaly alert containing alertConfigId and id
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListAnomaliesForAlertConfigurationOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.DataPointAnomaly" />, <xref
          uid="@azure/ai-metrics-advisor.AnomaliesPageResponse" />,
          PageSettings&gt;
  - name: >-
      listAnomaliesForDetectionConfiguration(string, string | Date, string |
      Date, ListAnomaliesForDetectionConfigurationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorClient.listAnomaliesForDetectionConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list anomalies for a detection
      configuration.


      `.byPage()` returns an async iterable iterator to list the anomalies in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const anomalies =
      client.listAnomaliesForDetectionConfiguration(detectionConfigId,
      startTime, endTime);

      let i = 1;

      for await (const anomaly of anomalies) {
        console.log(`anomaly ${i++}:`);
        console.log(anomaly);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter =
      client.listAnomaliesForDetectionConfiguration(detectionConfigId,
      startTime, endTime);

      let result = await iter.next();

      while (!result.done) {
        console.log(` anomaly - ${result.value.severity} ${result.value.status}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages =
      client.listAnomaliesForDetectionConfiguration(detectionConfigId,
      startTime, endTime)
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const anomaly of page.value) {
           console.dir(anomaly);
         }
       }
       page = await pages.next();
      }


      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listAnomaliesForDetectionConfiguration(detectionConfigId:
        string, startTime: string | Date, endTime: string | Date, options?:
        ListAnomaliesForDetectionConfigurationOptions):
        PagedAsyncIterableIterator<DataPointAnomaly, AnomaliesPageResponse,
        PageSettings>
      parameters:
        - id: detectionConfigId
          type: string
          description: Anomaly detection configuration id
        - id: startTime
          type: string | Date
          description: The start of time range to query anomalies
        - id: endTime
          type: string | Date
          description: The end of time range to query anomalies
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListAnomaliesForDetectionConfigurationOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.DataPointAnomaly" />, <xref
          uid="@azure/ai-metrics-advisor.AnomaliesPageResponse" />,
          PageSettings&gt;
  - name: >-
      listAnomalyDimensionValues(string, string | Date, string | Date, string,
      ListAnomalyDimensionValuesOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listAnomalyDimensionValues'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list dimension values of anomalies
      detected by a detection configuration.


      `.byPage()` returns an async iterable iterator to list the dimension
      values in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const dimensionValues = client
        .listAnomalyDimensionValues(detectionConfigId, startTime, endTime, dimensionName);
      let i = 1;

      for await (const dv of dimensionValues) {
        console.log(`dimension value ${i++}: ${dv}`);
      ```


      Example using `iter.next()`:


      ```js

      let iter = client
        .listAnomalyDimensionValues(detectionConfigId, startTime, endTime, dimensionName);
      let result = await iter.next();

      while (!result.done) {
        console.log(` dimension value - '${result.value}'`);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client
        .listAnomalyDimensionValues(
          detectionConfigId,
          startTime,
          endTime,
          dimensionName
        )
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
        if (page.value) {
          console.log(`-- page ${i++}`);
          for (const dv of page.value) {
            console.log(` dimension value - '${result.value}'`);
          }
        }
        page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listAnomalyDimensionValues(detectionConfigId: string,
        startTime: string | Date, endTime: string | Date, dimensionName: string,
        options?: ListAnomalyDimensionValuesOptions):
        PagedAsyncIterableIterator<string, DimensionValuesPageResponse,
        PageSettings>
      parameters:
        - id: detectionConfigId
          type: string
          description: Anomaly detection configuration id
        - id: startTime
          type: string | Date
          description: The start of time range to query anomalies
        - id: endTime
          type: string | Date
          description: The end of time range to query anomalies
        - id: dimensionName
          type: string
          description: Name of the dimension for anomaly detection config
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListAnomalyDimensionValuesOptions" />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;string, <xref
          uid="@azure/ai-metrics-advisor.DimensionValuesPageResponse" />,
          PageSettings&gt;
  - name: listFeedback(string, ListFeedbackOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listFeedback'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list feedbacks for a metric.


      `.byPage()` returns an async iterable iterator to list the feedbacks in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const feedbacks = client.listFeedback(metricId);

      let i = 1;

      for await (const f of feedbacks){
       console.log(`feedback ${i++}:`);
       console.log(f);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listFeedback(metricId);

      let result = await iter.next();

      while (!result.done) {
        console.log(` feedback - ${result.value.id}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listFeedback(metricId)
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const f of page.value) {
           console.dir(f);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFeedback(metricId: string, options?: ListFeedbackOptions):
        PagedAsyncIterableIterator<MetricFeedbackUnion,
        MetricFeedbackPageResponse, PageSettings>
      parameters:
        - id: metricId
          type: string
          description: Metric id
        - id: options
          type: <xref uid="@azure/ai-metrics-advisor.ListFeedbackOptions" />
          description: The options parameter
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.MetricFeedbackUnion" />, <xref
          uid="@azure/ai-metrics-advisor.MetricFeedbackPageResponse" />,
          PageSettings&gt;
  - name: listIncidentsForAlert(AnomalyAlert, ListIncidentsForAlertOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listIncidentsForAlert'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list incidents associated with an
      alert


      `.byPage()` returns an async iterable iterator to list the incidents in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const incidentList = client.listIncidentsForAlert(anomalyAlert);

      let i = 1;

      for await (const incident of incidentList){
        console.log(`incident ${i++}:`);
        console.log(incident);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listIncidentsForAlert(anomalyAlert);

      let result = await iter.next();

      while (!result.done) {
        console.log(` incident - ${result.value.id}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listIncidentsForAlert(anomalyAlert).byPage({
      maxPageSize: 10 });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const incident of page.value) {
           console.dir(incident);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listIncidentsForAlert(alert: AnomalyAlert, options?:
        ListIncidentsForAlertOptions):
        PagedAsyncIterableIterator<AnomalyIncident, IncidentsPageResponse,
        PageSettings>
      parameters:
        - id: alert
          type: <xref uid="@azure/ai-metrics-advisor.AnomalyAlert" />
          description: Anomaly alert containing alertConfigId and id
        - id: options
          type: >-
            <xref uid="@azure/ai-metrics-advisor.ListIncidentsForAlertOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyIncident" />, <xref
          uid="@azure/ai-metrics-advisor.IncidentsPageResponse" />,
          PageSettings&gt;
  - name: >-
      listIncidentsForDetectionConfiguration(string, string | Date, string |
      Date, ListIncidentsForDetectionConfigurationOptions)
    uid: >-
      @azure/ai-metrics-advisor.MetricsAdvisorClient.listIncidentsForDetectionConfiguration
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list incidents for an anomaly
      detection configuration.


      `.byPage()` returns an async iterable iterator to list the incidents in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const incidentList = client
        .listIncidentsForDetectionConfiguration(detectionConfigId, startTime, endTime);
      let i = 1;

      for await (const incident of incidentList){
       console.log(`incident ${i++}:`);
       console.log(incident);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter =
      client.listIncidentsForDetectionConfiguration(detectionConfigId,
      startTime, endTime);

      let result = await iter.next();

      while (!result.done) {
        console.log(` incident - ${result.value.id}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages =
      client.listIncidentsForDetectionConfiguration(detectionConfigId,
      startTime, endTime)
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const incident of page.value) {
           console.dir(incident);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listIncidentsForDetectionConfiguration(detectionConfigId:
        string, startTime: string | Date, endTime: string | Date, options?:
        ListIncidentsForDetectionConfigurationOptions):
        PagedAsyncIterableIterator<AnomalyIncident, IncidentsPageResponse,
        PageSettings>
      parameters:
        - id: detectionConfigId
          type: string
          description: Anomaly detection configuration id
        - id: startTime
          type: string | Date
          description: The start of time range to query for incidents
        - id: endTime
          type: string | Date
          description: The end of time range to query for incidents
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListIncidentsForDetectionConfigurationOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.AnomalyIncident" />, <xref
          uid="@azure/ai-metrics-advisor.IncidentsPageResponse" />,
          PageSettings&gt;
  - name: >-
      listMetricDimensionValues(string, string,
      ListMetricDimensionValuesOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listMetricDimensionValues'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list all the values for a metric
      dimension.


      `.byPage()` returns an async iterable iterator to list the values in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const values = client.listMetricDimensionValues(metricId, dimensionName);

      let i = 1;

      for await (const v of values){
        console.log(`dimension value ${i++}:`);
        console.log(v);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listMetricDimensionValues(metricId, dimensionName);

      let result = await iter.next();

      while (!result.done) {
        console.log(` dimension value - ${result.value}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listMetricDimensionValues(metricId,
      dimensionName).byPage({ maxPageSize: 10 });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
        if (page.value) {
          console.log(`-- page ${i++}`);
          for (const dv of page.value) {
            console.dir(dv);
          }
        }
        page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMetricDimensionValues(metricId: string, dimensionName:
        string, options?: ListMetricDimensionValuesOptions):
        PagedAsyncIterableIterator<string, DimensionValuesPageResponse,
        PageSettings>
      parameters:
        - id: metricId
          type: string
          description: Anomaly detection configuration id
        - id: dimensionName
          type: string
          description: Name of the dimension to list value
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListMetricDimensionValuesOptions" />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;string, <xref
          uid="@azure/ai-metrics-advisor.DimensionValuesPageResponse" />,
          PageSettings&gt;
  - name: >-
      listMetricEnrichmentStatus(string, string | Date, string | Date,
      ListMetricEnrichmentStatusOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listMetricEnrichmentStatus'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list incidents for an anomaly
      detection configuration.


      `.byPage()` returns an async iterable iterator to list the incidents in
      pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const statusList = client.listMetricEnrichmentStatus(metricId, startTime,
      endTime);

      let i = 1;

      for await (const status of statusList){
        console.log(`enrichment status ${i++}:`);
        console.log(status);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listMetricEnrichmentStatus(metricId, startTime,
      endTime);

      let result = await iter.next();

      while (!result.done) {
        console.log(` enrichment status - ${result.value.status} ${result.value.message}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listMetricEnrichmentStatus(metricId, startTime,
      endTime)
        .byPage({ maxPageSize: 10 });
      let page = await pages.next();

      let i = 1;

      while (!page.done) {
       if (page.value) {
         console.log(`-- page ${i++}`);
         for (const status of page.value) {
           console.dir(status);
         }
       }
       page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMetricEnrichmentStatus(metricId: string, startTime: string
        | Date, endTime: string | Date, options?:
        ListMetricEnrichmentStatusOptions):
        PagedAsyncIterableIterator<EnrichmentStatus,
        MetricEnrichmentStatusPageResponse, PageSettings>
      parameters:
        - id: metricId
          type: string
          description: Metric id
        - id: startTime
          type: string | Date
          description: The start of time range to query for enrichment status
        - id: endTime
          type: string | Date
          description: The end of time range to query for enrichment status
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListMetricEnrichmentStatusOptions" />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.EnrichmentStatus" />, <xref
          uid="@azure/ai-metrics-advisor.MetricEnrichmentStatusPageResponse" />,
          PageSettings&gt;
  - name: >-
      listMetricSeriesDefinitions(string, string | Date,
      ListMetricSeriesDefinitionsOptions)
    uid: '@azure/ai-metrics-advisor.MetricsAdvisorClient.listMetricSeriesDefinitions'
    package: '@azure/ai-metrics-advisor'
    summary: >-
      Returns an async iterable iterator to list series definitions (dimension
      combinations) for a metric.


      `.byPage()` returns an async iterable iterator to list the series
      definitions in pages.


      Example using `for await` syntax:


      ```js

      const client = new MetricsAdvisorClient(endpoint,
        new MetricsAdvisorKeyCredential(subscriptionKey, apiKey));
      const definitions = client.listMetricSeriesDefinitions(metricId,
      activeSince);

      let i = 1;

      for await (const definition of definitions){
       console.log(`definition ${i++}:`);
       console.log(definition);
      }

      ```


      Example using `iter.next()`:


      ```js

      let iter = client.listMetricSeriesDefinitions(metricId, activeSince);

      let result = await iter.next();

      while (!result.done) {
        console.log(` definition - ${result.value.metricId} ${result.value.dimension}`);
        console.dir(result.value);
        result = await iter.next();
      }

      ```


      Example using `byPage()`:


      ```js

      const pages = client.listMetricSeriesDefinitions(metricId,
      activeSince).byPage({ maxPageSize: 10 });

      let page = await pages.next();

      let i = 1;

      while (!page.done) {
        if (page.value) {
          console.log(`-- page ${i++}`);
          for (const definition of page.value) {
            console.dir(definition);
          }
        }
        page = await pages.next();
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listMetricSeriesDefinitions(metricId: string, activeSince:
        string | Date, options?: ListMetricSeriesDefinitionsOptions):
        PagedAsyncIterableIterator<MetricSeriesDefinition,
        MetricSeriesPageResponse, PageSettings>
      parameters:
        - id: metricId
          type: string
          description: Metric id
        - id: activeSince
          type: string | Date
          description: Definitions of series ingested after this time are returned
        - id: options
          type: >-
            <xref
            uid="@azure/ai-metrics-advisor.ListMetricSeriesDefinitionsOptions"
            />
          description: The options parameter.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/ai-metrics-advisor.MetricSeriesDefinition" />, <xref
          uid="@azure/ai-metrics-advisor.MetricSeriesPageResponse" />,
          PageSettings&gt;
