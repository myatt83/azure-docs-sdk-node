### YamlMime:TSPackage
uid: '@azure/identity'
name: '@azure/identity'
summary: ''
type: package
enums:
  - '@azure/identity.AzureAuthorityHosts'
classes:
  - '@azure/identity.AggregateAuthenticationError'
  - '@azure/identity.AuthenticationError'
  - '@azure/identity.AuthenticationRequiredError'
  - '@azure/identity.AuthorizationCodeCredential'
  - '@azure/identity.AzureCliCredential'
  - '@azure/identity.AzurePowerShellCredential'
  - '@azure/identity.ChainedTokenCredential'
  - '@azure/identity.ClientAssertionCredential'
  - '@azure/identity.ClientCertificateCredential'
  - '@azure/identity.ClientSecretCredential'
  - '@azure/identity.CredentialUnavailableError'
  - '@azure/identity.DefaultAzureCredential'
  - '@azure/identity.DeviceCodeCredential'
  - '@azure/identity.EnvironmentCredential'
  - '@azure/identity.InteractiveBrowserCredential'
  - '@azure/identity.ManagedIdentityCredential'
  - '@azure/identity.OnBehalfOfCredential'
  - '@azure/identity.UsernamePasswordCredential'
  - '@azure/identity.VisualStudioCodeCredential'
interfaces:
  - '@azure/identity.AccessToken'
  - '@azure/identity.AuthenticationRecord'
  - '@azure/identity.AuthenticationRequiredErrorOptions'
  - '@azure/identity.AuthorizationCodeCredentialOptions'
  - '@azure/identity.AzureCliCredentialOptions'
  - '@azure/identity.AzurePowerShellCredentialOptions'
  - '@azure/identity.ClientAssertionCredentialOptions'
  - '@azure/identity.ClientCertificateCredentialOptions'
  - '@azure/identity.ClientCertificatePEMCertificate'
  - '@azure/identity.ClientCertificatePEMCertificatePath'
  - '@azure/identity.ClientSecretCredentialOptions'
  - '@azure/identity.CredentialPersistenceOptions'
  - '@azure/identity.DefaultAzureCredentialClientIdOptions'
  - '@azure/identity.DefaultAzureCredentialOptions'
  - '@azure/identity.DefaultAzureCredentialResourceIdOptions'
  - '@azure/identity.DeviceCodeCredentialOptions'
  - '@azure/identity.DeviceCodeInfo'
  - '@azure/identity.EnvironmentCredentialOptions'
  - '@azure/identity.ErrorResponse'
  - '@azure/identity.GetTokenOptions'
  - '@azure/identity.InteractiveBrowserCredentialInBrowserOptions'
  - '@azure/identity.InteractiveBrowserCredentialNodeOptions'
  - '@azure/identity.InteractiveCredentialOptions'
  - '@azure/identity.ManagedIdentityCredentialClientIdOptions'
  - '@azure/identity.ManagedIdentityCredentialResourceIdOptions'
  - '@azure/identity.MultiTenantTokenCredentialOptions'
  - '@azure/identity.OnBehalfOfCredentialCertificateOptions'
  - '@azure/identity.OnBehalfOfCredentialSecretOptions'
  - '@azure/identity.TokenCachePersistenceOptions'
  - '@azure/identity.TokenCredential'
  - '@azure/identity.TokenCredentialOptions'
  - '@azure/identity.UsernamePasswordCredentialOptions'
  - '@azure/identity.VisualStudioCodeCredentialOptions'
typeAliases:
  - '@azure/identity.BrowserLoginStyle'
  - '@azure/identity.ClientCertificateCredentialPEMConfiguration'
  - '@azure/identity.DeviceCodePromptCallback'
  - '@azure/identity.IdentityPlugin'
  - '@azure/identity.OnBehalfOfCredentialOptions'
functions:
  - name: deserializeAuthenticationRecord(string)
    uid: '@azure/identity.deserializeAuthenticationRecord'
    package: '@azure/identity'
    summary: >-
      Deserializes a previously serialized authentication record from a string
      into an object.


      The input string must contain the following properties:


      - "authority"

      - "homeAccountId"

      - "clientId"

      - "tenantId"

      - "username"

      - "version"


      If the version we receive is unsupported, an error will be thrown.


      At the moment, the only available version is: "1.0", which is always set
      when the authentication record is serialized.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deserializeAuthenticationRecord(serializedRecord: string):
        AuthenticationRecord
      parameters:
        - id: serializedRecord
          type: string
          description: Authentication record previously serialized into string.
      return:
        description: AuthenticationRecord.
        type: <xref uid="@azure/identity.AuthenticationRecord" />
  - name: getDefaultAzureCredential()
    uid: '@azure/identity.getDefaultAzureCredential'
    package: '@azure/identity'
    summary: >-
      Returns a new instance of the
      [DefaultAzureCredential](xref:@azure/identity.DefaultAzureCredential).
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getDefaultAzureCredential(): TokenCredential'
      return:
        description: ''
        type: <xref uid="@azure/identity.TokenCredential" />
  - name: serializeAuthenticationRecord(AuthenticationRecord)
    uid: '@azure/identity.serializeAuthenticationRecord'
    package: '@azure/identity'
    summary: >-
      Serializes an `AuthenticationRecord` into a string.


      The output of a serialized authentication record will contain the
      following properties:


      - "authority"

      - "homeAccountId"

      - "clientId"

      - "tenantId"

      - "username"

      - "version"


      To later convert this string to a serialized `AuthenticationRecord`,
      please use the exported function `deserializeAuthenticationRecord()`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function serializeAuthenticationRecord(record: AuthenticationRecord):
        string
      parameters:
        - id: record
          type: <xref uid="@azure/identity.AuthenticationRecord" />
          description: ''
      return:
        description: ''
        type: string
  - name: useIdentityPlugin(IdentityPlugin)
    uid: '@azure/identity.useIdentityPlugin'
    package: '@azure/identity'
    summary: >-
      Extend Azure Identity with additional functionality. Pass a plugin from

      a plugin package, such as:


      - `@azure/identity-cache-persistence`: provides persistent token caching

      - `@azure/identity-vscode`: provides the dependencies of
        `VisualStudioCodeCredential` and enables it

      Example:


      ```javascript

      import { cachePersistencePlugin } from
      "@azure/identity-cache-persistence";


      import { useIdentityPlugin, DefaultAzureCredential } from
      "@azure/identity";

      useIdentityPlugin(cachePersistencePlugin);


      // The plugin has the capability to extend `DefaultAzureCredential` and to

      // add middleware to the underlying credentials, such as persistence.

      const credential = new DefaultAzureCredential({
        tokenCachePersistenceOptions: {
          enabled: true
        }
      });

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function useIdentityPlugin(plugin: IdentityPlugin)'
      parameters:
        - id: plugin
          type: <xref uid="@azure/identity.IdentityPlugin" />
          description: the plugin to register
