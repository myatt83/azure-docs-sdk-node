### YamlMime:TSType
name: InteractiveBrowserCredential
uid: '@azure/identity.InteractiveBrowserCredential'
package: '@azure/identity'
summary: |-
  Enables authentication to Azure Active Directory inside of the web browser
  using the interactive login flow.
fullName: InteractiveBrowserCredential
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      InteractiveBrowserCredential(InteractiveBrowserCredentialNodeOptions |
      InteractiveBrowserCredentialInBrowserOptions)
    uid: '@azure/identity.InteractiveBrowserCredential.constructor'
    package: '@azure/identity'
    summary: >-
      Creates an instance of InteractiveBrowserCredential with the details
      needed.


      This credential uses the [Authorization Code
      Flow](https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow).

      On Node.js, it will open a browser window while it listens for a redirect
      response from the authentication service.

      On browsers, it authenticates via popups. The `loginStyle` optional
      parameter can be set to `redirect` to authenticate by redirecting the user
      to an Azure secure login page, which then will redirect the user back to
      the web application where the authentication started.


      For Node.js, if a `clientId` is provided, the Azure Active Directory
      application will need to be configured to have a "Mobile and desktop
      applications" redirect endpoint.

      Follow our guide on [setting up Redirect URIs for Desktop apps that calls
      to web
      APIs](https://docs.microsoft.com/azure/active-directory/develop/scenario-desktop-app-registration#redirect-uris).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new InteractiveBrowserCredential(options?:
        InteractiveBrowserCredentialNodeOptions |
        InteractiveBrowserCredentialInBrowserOptions)
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/identity.InteractiveBrowserCredentialNodeOptions"
            /> | <xref
            uid="@azure/identity.InteractiveBrowserCredentialInBrowserOptions"
            />
          description: >-
            Options for configuring the client which makes the authentication
            requests.
methods:
  - name: authenticate(string | string[], GetTokenOptions)
    uid: '@azure/identity.InteractiveBrowserCredential.authenticate'
    package: '@azure/identity'
    summary: >-
      Authenticates with Azure Active Directory and returns an access token if
      successful.

      If authentication fails, a
      [CredentialUnavailableError](xref:@azure/identity.CredentialUnavailableError)
      will be thrown with the details of the failure.


      If the token can't be retrieved silently, this method will require user
      interaction to retrieve the token.


      On Node.js, this credential has [Proof Key for Code Exchange
      (PKCE)](https://datatracker.ietf.org/doc/html/rfc7636) enabled by default.

      PKCE is a security feature that mitigates authentication code interception
      attacks.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function authenticate(scopes: string | string[], options?:
        GetTokenOptions): Promise<undefined | AuthenticationRecord>
      parameters:
        - id: scopes
          type: string | string[]
          description: The list of scopes for which the token will have access.
        - id: options
          type: <xref uid="@azure/identity.GetTokenOptions" />
          description: |-
            The options used to configure any requests this
                             TokenCredential implementation might make.
      return:
        description: ''
        type: >-
          Promise&lt;undefined | <xref
          uid="@azure/identity.AuthenticationRecord" />&gt;
  - name: getToken(string | string[], GetTokenOptions)
    uid: '@azure/identity.InteractiveBrowserCredential.getToken'
    package: '@azure/identity'
    summary: >-
      Authenticates with Azure Active Directory and returns an access token if
      successful.

      If authentication fails, a
      [CredentialUnavailableError](xref:@azure/identity.CredentialUnavailableError)
      will be thrown with the details of the failure.


      If the user provided the option `disableAutomaticAuthentication`,

      once the token can't be retrieved silently,

      this method won't attempt to request user interaction to retrieve the
      token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getToken(scopes: string | string[], options?: GetTokenOptions):
        Promise<AccessToken>
      parameters:
        - id: scopes
          type: string | string[]
          description: The list of scopes for which the token will have access.
        - id: options
          type: <xref uid="@azure/identity.GetTokenOptions" />
          description: |-
            The options used to configure any requests this
                           TokenCredential implementation might make.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/identity.AccessToken" />&gt;
